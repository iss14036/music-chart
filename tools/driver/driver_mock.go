// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver.go

// Package driver is a generated GoMock package.
package driver

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockGormItf is a mock of GormItf interface
type MockGormItf struct {
	ctrl     *gomock.Controller
	recorder *MockGormItfMockRecorder
}

// MockGormItfMockRecorder is the mock recorder for MockGormItf
type MockGormItfMockRecorder struct {
	mock *MockGormItf
}

// NewMockGormItf creates a new mock instance
func NewMockGormItf(ctrl *gomock.Controller) *MockGormItf {
	mock := &MockGormItf{ctrl: ctrl}
	mock.recorder = &MockGormItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGormItf) EXPECT() *MockGormItfMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockGormItf) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockGormItfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGormItf)(nil).Close))
}

// DB mocks base method
func (m *MockGormItf) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockGormItfMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGormItf)(nil).DB))
}

// New mocks base method
func (m *MockGormItf) New() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// New indicates an expected call of New
func (mr *MockGormItfMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockGormItf)(nil).New))
}

// NewScope mocks base method
func (m *MockGormItf) NewScope(value interface{}) *gorm.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewScope", value)
	ret0, _ := ret[0].(*gorm.Scope)
	return ret0
}

// NewScope indicates an expected call of NewScope
func (mr *MockGormItfMockRecorder) NewScope(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewScope", reflect.TypeOf((*MockGormItf)(nil).NewScope), value)
}

// CommonDB mocks base method
func (m *MockGormItf) CommonDB() gorm.SQLCommon {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommonDB")
	ret0, _ := ret[0].(gorm.SQLCommon)
	return ret0
}

// CommonDB indicates an expected call of CommonDB
func (mr *MockGormItfMockRecorder) CommonDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommonDB", reflect.TypeOf((*MockGormItf)(nil).CommonDB))
}

// Callback mocks base method
func (m *MockGormItf) Callback() *gorm.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback")
	ret0, _ := ret[0].(*gorm.Callback)
	return ret0
}

// Callback indicates an expected call of Callback
func (mr *MockGormItfMockRecorder) Callback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockGormItf)(nil).Callback))
}

// SetLogger mocks base method
func (m *MockGormItf) SetLogger(l gorm.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", l)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockGormItfMockRecorder) SetLogger(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockGormItf)(nil).SetLogger), l)
}

// LogMode mocks base method
func (m *MockGormItf) LogMode(enable bool) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMode", enable)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// LogMode indicates an expected call of LogMode
func (mr *MockGormItfMockRecorder) LogMode(enable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMode", reflect.TypeOf((*MockGormItf)(nil).LogMode), enable)
}

// SingularTable mocks base method
func (m *MockGormItf) SingularTable(enable bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SingularTable", enable)
}

// SingularTable indicates an expected call of SingularTable
func (mr *MockGormItfMockRecorder) SingularTable(enable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingularTable", reflect.TypeOf((*MockGormItf)(nil).SingularTable), enable)
}

// Where mocks base method
func (m *MockGormItf) Where(query interface{}, args ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockGormItfMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockGormItf)(nil).Where), varargs...)
}

// Or mocks base method
func (m *MockGormItf) Or(query interface{}, args ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Or indicates an expected call of Or
func (mr *MockGormItfMockRecorder) Or(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockGormItf)(nil).Or), varargs...)
}

// Not mocks base method
func (m *MockGormItf) Not(query interface{}, args ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Not indicates an expected call of Not
func (mr *MockGormItfMockRecorder) Not(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockGormItf)(nil).Not), varargs...)
}

// Limit mocks base method
func (m *MockGormItf) Limit(value int) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockGormItfMockRecorder) Limit(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockGormItf)(nil).Limit), value)
}

// Offset mocks base method
func (m *MockGormItf) Offset(value int) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Offset indicates an expected call of Offset
func (mr *MockGormItfMockRecorder) Offset(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockGormItf)(nil).Offset), value)
}

// Order mocks base method
func (m *MockGormItf) Order(value string, reorder ...bool) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range reorder {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockGormItfMockRecorder) Order(value interface{}, reorder ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, reorder...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockGormItf)(nil).Order), varargs...)
}

// Select mocks base method
func (m *MockGormItf) Select(query interface{}, args ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockGormItfMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockGormItf)(nil).Select), varargs...)
}

// Omit mocks base method
func (m *MockGormItf) Omit(columns ...string) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Omit indicates an expected call of Omit
func (mr *MockGormItfMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockGormItf)(nil).Omit), columns...)
}

// Group mocks base method
func (m *MockGormItf) Group(query string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", query)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockGormItfMockRecorder) Group(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockGormItf)(nil).Group), query)
}

// Having mocks base method
func (m *MockGormItf) Having(query string, values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Having indicates an expected call of Having
func (mr *MockGormItfMockRecorder) Having(query interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockGormItf)(nil).Having), varargs...)
}

// Joins mocks base method
func (m *MockGormItf) Joins(query string, args ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Joins indicates an expected call of Joins
func (mr *MockGormItfMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockGormItf)(nil).Joins), varargs...)
}

// Scopes mocks base method
func (m *MockGormItf) Scopes(funcs ...func(*gorm.DB) *gorm.DB) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Scopes indicates an expected call of Scopes
func (mr *MockGormItfMockRecorder) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockGormItf)(nil).Scopes), funcs...)
}

// Unscoped mocks base method
func (m *MockGormItf) Unscoped() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Unscoped indicates an expected call of Unscoped
func (mr *MockGormItfMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockGormItf)(nil).Unscoped))
}

// Attrs mocks base method
func (m *MockGormItf) Attrs(attrs ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Attrs indicates an expected call of Attrs
func (mr *MockGormItfMockRecorder) Attrs(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockGormItf)(nil).Attrs), attrs...)
}

// Assign mocks base method
func (m *MockGormItf) Assign(attrs ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Assign indicates an expected call of Assign
func (mr *MockGormItfMockRecorder) Assign(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockGormItf)(nil).Assign), attrs...)
}

// First mocks base method
func (m *MockGormItf) First(out interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// First indicates an expected call of First
func (mr *MockGormItfMockRecorder) First(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockGormItf)(nil).First), varargs...)
}

// Last mocks base method
func (m *MockGormItf) Last(out interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Last indicates an expected call of Last
func (mr *MockGormItfMockRecorder) Last(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockGormItf)(nil).Last), varargs...)
}

// Find mocks base method
func (m *MockGormItf) Find(out interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockGormItfMockRecorder) Find(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGormItf)(nil).Find), varargs...)
}

// Scan mocks base method
func (m *MockGormItf) Scan(dest interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockGormItfMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockGormItf)(nil).Scan), dest)
}

// Row mocks base method
func (m *MockGormItf) Row() *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row
func (mr *MockGormItfMockRecorder) Row() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockGormItf)(nil).Row))
}

// Rows mocks base method
func (m *MockGormItf) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows
func (mr *MockGormItfMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockGormItf)(nil).Rows))
}

// ScanRows mocks base method
func (m *MockGormItf) ScanRows(rows *sql.Rows, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", rows, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows
func (mr *MockGormItfMockRecorder) ScanRows(rows, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockGormItf)(nil).ScanRows), rows, result)
}

// Pluck mocks base method
func (m *MockGormItf) Pluck(column string, value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Pluck indicates an expected call of Pluck
func (mr *MockGormItfMockRecorder) Pluck(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockGormItf)(nil).Pluck), column, value)
}

// Count mocks base method
func (m *MockGormItf) Count(value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockGormItfMockRecorder) Count(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGormItf)(nil).Count), value)
}

// Related mocks base method
func (m *MockGormItf) Related(value interface{}, foreignKeys ...string) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range foreignKeys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Related", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Related indicates an expected call of Related
func (mr *MockGormItfMockRecorder) Related(value interface{}, foreignKeys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, foreignKeys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Related", reflect.TypeOf((*MockGormItf)(nil).Related), varargs...)
}

// FirstOrInit mocks base method
func (m *MockGormItf) FirstOrInit(out interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit
func (mr *MockGormItfMockRecorder) FirstOrInit(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockGormItf)(nil).FirstOrInit), varargs...)
}

// FirstOrCreate mocks base method
func (m *MockGormItf) FirstOrCreate(out interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate
func (mr *MockGormItfMockRecorder) FirstOrCreate(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockGormItf)(nil).FirstOrCreate), varargs...)
}

// Update mocks base method
func (m *MockGormItf) Update(attrs ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGormItfMockRecorder) Update(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGormItf)(nil).Update), attrs...)
}

// Updates mocks base method
func (m *MockGormItf) Updates(values interface{}, ignoreProtectedAttrs ...bool) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{values}
	for _, a := range ignoreProtectedAttrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Updates", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Updates indicates an expected call of Updates
func (mr *MockGormItfMockRecorder) Updates(values interface{}, ignoreProtectedAttrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{values}, ignoreProtectedAttrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockGormItf)(nil).Updates), varargs...)
}

// UpdateColumn mocks base method
func (m *MockGormItf) UpdateColumn(attrs ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateColumn", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn
func (mr *MockGormItfMockRecorder) UpdateColumn(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockGormItf)(nil).UpdateColumn), attrs...)
}

// UpdateColumns mocks base method
func (m *MockGormItf) UpdateColumns(values interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", values)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns
func (mr *MockGormItfMockRecorder) UpdateColumns(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockGormItf)(nil).UpdateColumns), values)
}

// Save mocks base method
func (m *MockGormItf) Save(value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockGormItfMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGormItf)(nil).Save), value)
}

// Create mocks base method
func (m *MockGormItf) Create(value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockGormItfMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGormItf)(nil).Create), value)
}

// Delete mocks base method
func (m *MockGormItf) Delete(value interface{}, where ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGormItfMockRecorder) Delete(value interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGormItf)(nil).Delete), varargs...)
}

// Raw mocks base method
func (m *MockGormItf) Raw(sql string, values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Raw indicates an expected call of Raw
func (mr *MockGormItfMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockGormItf)(nil).Raw), varargs...)
}

// Exec mocks base method
func (m *MockGormItf) Exec(sql string, values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockGormItfMockRecorder) Exec(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockGormItf)(nil).Exec), varargs...)
}

// Model mocks base method
func (m *MockGormItf) Model(value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockGormItfMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockGormItf)(nil).Model), value)
}

// Table mocks base method
func (m *MockGormItf) Table(name string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", name)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Table indicates an expected call of Table
func (mr *MockGormItfMockRecorder) Table(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockGormItf)(nil).Table), name)
}

// Debug mocks base method
func (m *MockGormItf) Debug() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Debug indicates an expected call of Debug
func (mr *MockGormItfMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockGormItf)(nil).Debug))
}

// Begin mocks base method
func (m *MockGormItf) Begin() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockGormItfMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockGormItf)(nil).Begin))
}

// Commit mocks base method
func (m *MockGormItf) Commit() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockGormItfMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGormItf)(nil).Commit))
}

// Rollback mocks base method
func (m *MockGormItf) Rollback() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockGormItfMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockGormItf)(nil).Rollback))
}

// RollbackUnlessCommitted mocks base method
func (m *MockGormItf) RollbackUnlessCommitted() GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackUnlessCommitted")
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// RollbackUnlessCommitted indicates an expected call of RollbackUnlessCommitted
func (mr *MockGormItfMockRecorder) RollbackUnlessCommitted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackUnlessCommitted", reflect.TypeOf((*MockGormItf)(nil).RollbackUnlessCommitted))
}

// NewRecord mocks base method
func (m *MockGormItf) NewRecord(value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRecord", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NewRecord indicates an expected call of NewRecord
func (mr *MockGormItfMockRecorder) NewRecord(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecord", reflect.TypeOf((*MockGormItf)(nil).NewRecord), value)
}

// RecordNotFound mocks base method
func (m *MockGormItf) RecordNotFound() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordNotFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RecordNotFound indicates an expected call of RecordNotFound
func (mr *MockGormItfMockRecorder) RecordNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNotFound", reflect.TypeOf((*MockGormItf)(nil).RecordNotFound))
}

// CreateTable mocks base method
func (m *MockGormItf) CreateTable(values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockGormItfMockRecorder) CreateTable(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockGormItf)(nil).CreateTable), values...)
}

// DropTable mocks base method
func (m *MockGormItf) DropTable(values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTable", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockGormItfMockRecorder) DropTable(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockGormItf)(nil).DropTable), values...)
}

// DropTableIfExists mocks base method
func (m *MockGormItf) DropTableIfExists(values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTableIfExists", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// DropTableIfExists indicates an expected call of DropTableIfExists
func (mr *MockGormItfMockRecorder) DropTableIfExists(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTableIfExists", reflect.TypeOf((*MockGormItf)(nil).DropTableIfExists), values...)
}

// HasTable mocks base method
func (m *MockGormItf) HasTable(value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTable", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable
func (mr *MockGormItfMockRecorder) HasTable(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockGormItf)(nil).HasTable), value)
}

// AutoMigrate mocks base method
func (m *MockGormItf) AutoMigrate(values ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (mr *MockGormItfMockRecorder) AutoMigrate(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockGormItf)(nil).AutoMigrate), values...)
}

// ModifyColumn mocks base method
func (m *MockGormItf) ModifyColumn(column, typ string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyColumn", column, typ)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// ModifyColumn indicates an expected call of ModifyColumn
func (mr *MockGormItfMockRecorder) ModifyColumn(column, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyColumn", reflect.TypeOf((*MockGormItf)(nil).ModifyColumn), column, typ)
}

// DropColumn mocks base method
func (m *MockGormItf) DropColumn(column string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropColumn", column)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// DropColumn indicates an expected call of DropColumn
func (mr *MockGormItfMockRecorder) DropColumn(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropColumn", reflect.TypeOf((*MockGormItf)(nil).DropColumn), column)
}

// AddIndex mocks base method
func (m *MockGormItf) AddIndex(indexName string, column ...string) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{indexName}
	for _, a := range column {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIndex", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// AddIndex indicates an expected call of AddIndex
func (mr *MockGormItfMockRecorder) AddIndex(indexName interface{}, column ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{indexName}, column...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockGormItf)(nil).AddIndex), varargs...)
}

// AddUniqueIndex mocks base method
func (m *MockGormItf) AddUniqueIndex(indexName string, column ...string) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{indexName}
	for _, a := range column {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUniqueIndex", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// AddUniqueIndex indicates an expected call of AddUniqueIndex
func (mr *MockGormItfMockRecorder) AddUniqueIndex(indexName interface{}, column ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{indexName}, column...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUniqueIndex", reflect.TypeOf((*MockGormItf)(nil).AddUniqueIndex), varargs...)
}

// RemoveIndex mocks base method
func (m *MockGormItf) RemoveIndex(indexName string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIndex", indexName)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// RemoveIndex indicates an expected call of RemoveIndex
func (mr *MockGormItfMockRecorder) RemoveIndex(indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIndex", reflect.TypeOf((*MockGormItf)(nil).RemoveIndex), indexName)
}

// AddForeignKey mocks base method
func (m *MockGormItf) AddForeignKey(field, dest, onDelete, onUpdate string) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddForeignKey", field, dest, onDelete, onUpdate)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// AddForeignKey indicates an expected call of AddForeignKey
func (mr *MockGormItfMockRecorder) AddForeignKey(field, dest, onDelete, onUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForeignKey", reflect.TypeOf((*MockGormItf)(nil).AddForeignKey), field, dest, onDelete, onUpdate)
}

// Association mocks base method
func (m *MockGormItf) Association(column string) *gorm.Association {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Association", column)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association
func (mr *MockGormItfMockRecorder) Association(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockGormItf)(nil).Association), column)
}

// Preload mocks base method
func (m *MockGormItf) Preload(column string, conditions ...interface{}) GormItf {
	m.ctrl.T.Helper()
	varargs := []interface{}{column}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Preload indicates an expected call of Preload
func (mr *MockGormItfMockRecorder) Preload(column interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockGormItf)(nil).Preload), varargs...)
}

// Set mocks base method
func (m *MockGormItf) Set(name string, value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", name, value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockGormItfMockRecorder) Set(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGormItf)(nil).Set), name, value)
}

// InstantSet mocks base method
func (m *MockGormItf) InstantSet(name string, value interface{}) GormItf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstantSet", name, value)
	ret0, _ := ret[0].(GormItf)
	return ret0
}

// InstantSet indicates an expected call of InstantSet
func (mr *MockGormItfMockRecorder) InstantSet(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantSet", reflect.TypeOf((*MockGormItf)(nil).InstantSet), name, value)
}

// Get mocks base method
func (m *MockGormItf) Get(name string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGormItfMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGormItf)(nil).Get), name)
}

// SetJoinTableHandler mocks base method
func (m *MockGormItf) SetJoinTableHandler(source interface{}, column string, handler gorm.JoinTableHandlerInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJoinTableHandler", source, column, handler)
}

// SetJoinTableHandler indicates an expected call of SetJoinTableHandler
func (mr *MockGormItfMockRecorder) SetJoinTableHandler(source, column, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJoinTableHandler", reflect.TypeOf((*MockGormItf)(nil).SetJoinTableHandler), source, column, handler)
}

// AddError mocks base method
func (m *MockGormItf) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError
func (mr *MockGormItfMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockGormItf)(nil).AddError), err)
}

// GetErrors mocks base method
func (m *MockGormItf) GetErrors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// GetErrors indicates an expected call of GetErrors
func (mr *MockGormItfMockRecorder) GetErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrors", reflect.TypeOf((*MockGormItf)(nil).GetErrors))
}

// Error mocks base method
func (m *MockGormItf) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockGormItfMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGormItf)(nil).Error))
}

// RowsAffected mocks base method
func (m *MockGormItf) RowsAffected() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected
func (mr *MockGormItfMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockGormItf)(nil).RowsAffected))
}
