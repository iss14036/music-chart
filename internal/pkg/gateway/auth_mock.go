// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package gateway is a generated GoMock package.
package gateway

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	reflect "reflect"
)

// MockAuthItf is a mock of AuthItf interface
type MockAuthItf struct {
	ctrl     *gomock.Controller
	recorder *MockAuthItfMockRecorder
}

// MockAuthItfMockRecorder is the mock recorder for MockAuthItf
type MockAuthItfMockRecorder struct {
	mock *MockAuthItf
}

// NewMockAuthItf creates a new mock instance
func NewMockAuthItf(ctrl *gomock.Controller) *MockAuthItf {
	mock := &MockAuthItf{ctrl: ctrl}
	mock.recorder = &MockAuthItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthItf) EXPECT() *MockAuthItfMockRecorder {
	return m.recorder
}

// GetToken mocks base method
func (m *MockAuthItf) GetToken(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken
func (mr *MockAuthItfMockRecorder) GetToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuthItf)(nil).GetToken), userID)
}

// Middleware mocks base method
func (m *MockAuthItf) Middleware(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Middleware indicates an expected call of Middleware
func (mr *MockAuthItfMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockAuthItf)(nil).Middleware), next)
}
