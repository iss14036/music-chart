// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/iss14036/music-chart/internal/pkg/entity"
	reflect "reflect"
)

// MockUserServiceItf is a mock of UserServiceItf interface
type MockUserServiceItf struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceItfMockRecorder
}

// MockUserServiceItfMockRecorder is the mock recorder for MockUserServiceItf
type MockUserServiceItfMockRecorder struct {
	mock *MockUserServiceItf
}

// NewMockUserServiceItf creates a new mock instance
func NewMockUserServiceItf(ctrl *gomock.Controller) *MockUserServiceItf {
	mock := &MockUserServiceItf{ctrl: ctrl}
	mock.recorder = &MockUserServiceItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceItf) EXPECT() *MockUserServiceItfMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockUserServiceItf) GetUser(filter *entity.UserFilter) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", filter)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserServiceItfMockRecorder) GetUser(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceItf)(nil).GetUser), filter)
}

// InsertUser mocks base method
func (m *MockUserServiceItf) InsertUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserServiceItfMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserServiceItf)(nil).InsertUser), user)
}

// Login mocks base method
func (m *MockUserServiceItf) Login(filter *entity.UserFilter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", filter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserServiceItfMockRecorder) Login(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceItf)(nil).Login), filter)
}

// MockMusicServiceItf is a mock of MusicServiceItf interface
type MockMusicServiceItf struct {
	ctrl     *gomock.Controller
	recorder *MockMusicServiceItfMockRecorder
}

// MockMusicServiceItfMockRecorder is the mock recorder for MockMusicServiceItf
type MockMusicServiceItfMockRecorder struct {
	mock *MockMusicServiceItf
}

// NewMockMusicServiceItf creates a new mock instance
func NewMockMusicServiceItf(ctrl *gomock.Controller) *MockMusicServiceItf {
	mock := &MockMusicServiceItf{ctrl: ctrl}
	mock.recorder = &MockMusicServiceItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMusicServiceItf) EXPECT() *MockMusicServiceItfMockRecorder {
	return m.recorder
}

// FetchMusic mocks base method
func (m *MockMusicServiceItf) FetchMusic(filter *entity.MusicFilter) (entity.MusicResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMusic", filter)
	ret0, _ := ret[0].(entity.MusicResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMusic indicates an expected call of FetchMusic
func (mr *MockMusicServiceItfMockRecorder) FetchMusic(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMusic", reflect.TypeOf((*MockMusicServiceItf)(nil).FetchMusic), filter)
}

// DetailMusic mocks base method
func (m *MockMusicServiceItf) DetailMusic(filter *entity.MusicFilter) (entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMusic", filter)
	ret0, _ := ret[0].(entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMusic indicates an expected call of DetailMusic
func (mr *MockMusicServiceItfMockRecorder) DetailMusic(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMusic", reflect.TypeOf((*MockMusicServiceItf)(nil).DetailMusic), filter)
}

// MockFavoriteServiceItf is a mock of FavoriteServiceItf interface
type MockFavoriteServiceItf struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteServiceItfMockRecorder
}

// MockFavoriteServiceItfMockRecorder is the mock recorder for MockFavoriteServiceItf
type MockFavoriteServiceItfMockRecorder struct {
	mock *MockFavoriteServiceItf
}

// NewMockFavoriteServiceItf creates a new mock instance
func NewMockFavoriteServiceItf(ctrl *gomock.Controller) *MockFavoriteServiceItf {
	mock := &MockFavoriteServiceItf{ctrl: ctrl}
	mock.recorder = &MockFavoriteServiceItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFavoriteServiceItf) EXPECT() *MockFavoriteServiceItfMockRecorder {
	return m.recorder
}

// SetFavorite mocks base method
func (m *MockFavoriteServiceItf) SetFavorite(favorite *entity.Favorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFavorite", favorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFavorite indicates an expected call of SetFavorite
func (mr *MockFavoriteServiceItfMockRecorder) SetFavorite(favorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFavorite", reflect.TypeOf((*MockFavoriteServiceItf)(nil).SetFavorite), favorite)
}

// GetFavorite mocks base method
func (m *MockFavoriteServiceItf) GetFavorite(filter *entity.FavoriteFilter) (entity.FavoriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorite", filter)
	ret0, _ := ret[0].(entity.FavoriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorite indicates an expected call of GetFavorite
func (mr *MockFavoriteServiceItfMockRecorder) GetFavorite(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorite", reflect.TypeOf((*MockFavoriteServiceItf)(nil).GetFavorite), filter)
}
