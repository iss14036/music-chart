// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/iss14036/music-chart/internal/pkg/entity"
	reflect "reflect"
)

// MockUserRepositoryItf is a mock of UserRepositoryItf interface
type MockUserRepositoryItf struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryItfMockRecorder
}

// MockUserRepositoryItfMockRecorder is the mock recorder for MockUserRepositoryItf
type MockUserRepositoryItfMockRecorder struct {
	mock *MockUserRepositoryItf
}

// NewMockUserRepositoryItf creates a new mock instance
func NewMockUserRepositoryItf(ctrl *gomock.Controller) *MockUserRepositoryItf {
	mock := &MockUserRepositoryItf{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepositoryItf) EXPECT() *MockUserRepositoryItfMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockUserRepositoryItf) GetUser(filter *entity.UserFilter) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", filter)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserRepositoryItfMockRecorder) GetUser(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepositoryItf)(nil).GetUser), filter)
}

// InsertUser mocks base method
func (m *MockUserRepositoryItf) InsertUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryItfMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepositoryItf)(nil).InsertUser), user)
}

// MockMusicRepositoryItf is a mock of MusicRepositoryItf interface
type MockMusicRepositoryItf struct {
	ctrl     *gomock.Controller
	recorder *MockMusicRepositoryItfMockRecorder
}

// MockMusicRepositoryItfMockRecorder is the mock recorder for MockMusicRepositoryItf
type MockMusicRepositoryItfMockRecorder struct {
	mock *MockMusicRepositoryItf
}

// NewMockMusicRepositoryItf creates a new mock instance
func NewMockMusicRepositoryItf(ctrl *gomock.Controller) *MockMusicRepositoryItf {
	mock := &MockMusicRepositoryItf{ctrl: ctrl}
	mock.recorder = &MockMusicRepositoryItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMusicRepositoryItf) EXPECT() *MockMusicRepositoryItfMockRecorder {
	return m.recorder
}

// GetMusic mocks base method
func (m *MockMusicRepositoryItf) GetMusic(filter *entity.MusicFilter) (entity.MusicResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusic", filter)
	ret0, _ := ret[0].(entity.MusicResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusic indicates an expected call of GetMusic
func (mr *MockMusicRepositoryItfMockRecorder) GetMusic(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusic", reflect.TypeOf((*MockMusicRepositoryItf)(nil).GetMusic), filter)
}

// MockFavoriteRepositoryItf is a mock of FavoriteRepositoryItf interface
type MockFavoriteRepositoryItf struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteRepositoryItfMockRecorder
}

// MockFavoriteRepositoryItfMockRecorder is the mock recorder for MockFavoriteRepositoryItf
type MockFavoriteRepositoryItfMockRecorder struct {
	mock *MockFavoriteRepositoryItf
}

// NewMockFavoriteRepositoryItf creates a new mock instance
func NewMockFavoriteRepositoryItf(ctrl *gomock.Controller) *MockFavoriteRepositoryItf {
	mock := &MockFavoriteRepositoryItf{ctrl: ctrl}
	mock.recorder = &MockFavoriteRepositoryItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFavoriteRepositoryItf) EXPECT() *MockFavoriteRepositoryItfMockRecorder {
	return m.recorder
}

// SetFavorite mocks base method
func (m *MockFavoriteRepositoryItf) SetFavorite(favorite *entity.Favorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFavorite", favorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFavorite indicates an expected call of SetFavorite
func (mr *MockFavoriteRepositoryItfMockRecorder) SetFavorite(favorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFavorite", reflect.TypeOf((*MockFavoriteRepositoryItf)(nil).SetFavorite), favorite)
}

// GetFavorite mocks base method
func (m *MockFavoriteRepositoryItf) GetFavorite(filter *entity.FavoriteFilter) (entity.FavoriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorite", filter)
	ret0, _ := ret[0].(entity.FavoriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorite indicates an expected call of GetFavorite
func (mr *MockFavoriteRepositoryItfMockRecorder) GetFavorite(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorite", reflect.TypeOf((*MockFavoriteRepositoryItf)(nil).GetFavorite), filter)
}
